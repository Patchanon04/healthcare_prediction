version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: medical_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medical_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medical_network

  # Redis for Channels
  redis:
    image: redis:7-alpine
    container_name: medical_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - medical_network
    restart: unless-stopped

  # ML Microservice (FastAPI)
  ml_service:
    build:
      context: ./ml_service
      dockerfile: Dockerfile
    container_name: medical_ml_service
    ports:
      - "5001:5000"
    environment:
      - PYTHONUNBUFFERED=1
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME:-us-east-1}
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:5000/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - medical_network
    restart: unless-stopped

  # Backend (Django REST Framework)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical_backend
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-dev-key-change-in-production}
      - DEBUG=${DEBUG:-True}
      - POSTGRES_DB=${POSTGRES_DB:-medical_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ML_SERVICE_URL=http://ml_service:5000
      - ML_SERVICE_TIMEOUT=30
      - ML_SERVICE_MAX_RETRIES=3
      - USE_S3=${USE_S3:-False}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME:-}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME:-us-east-1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:8080,http://localhost:80}
    volumes:
      - ./backend/media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ml_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - medical_network
    restart: unless-stopped

  # Frontend (Vue.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medical_frontend
    ports:
      - "80:80"
    environment:
      - VUE_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - medical_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  medical_network:
    driver: bridge
